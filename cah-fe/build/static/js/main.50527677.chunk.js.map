{"version":3,"sources":["games/player-view.tsx","games/judge-view.tsx","games/games.tsx","games/game-board.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["PlayerView","this","props","playerInfo","playedCard","playedCards","find","card","playerId","id","className","name","Button","onClick","swapCards","negative","whiteCards","map","playCard","disabled","currentJudge","positive","React","JudgeView","waitingString","pickCardString","cardName","pickWinner","anyCardsPlayed","length","playerName","getJudgeCards","autobind","Games","socket","socketIOClient","state","games","gameToJoin","gameName","modalOpen","subscribedGame","on","window","localStorage","getItem","setState","setItem","game","emit","history","push","gameId","players","event","data","preventDefault","value","Modal","closeOnDimmerClick","onClose","onCloseModal","open","size","Content","Input","onChange","setPlayerName","Actions","joinGame","playedWhiteCards","nextRound","getWhiteCard","getPlayerView","placeholder","setGameName","createGame","Object","values","setCurrentGame","getJoinModal","GameBoard","match","params","Loader","active","activeBlackCard","text","player","activeJudgeClass","score","getMakeJudgeButton","App","key","exact","path","component","withRouter","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.50527677.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\nexport class PlayerView extends React.Component<any, any> {\r\n    public render():any {\r\n        const { playerInfo, playedCards } = this.props;\r\n        const playedCard = playedCards.find((card: any) => card.playerId === playerInfo.id);\r\n        const swapCards: any = () => this.props.swapCards(playerInfo.id);\r\n        return (\r\n            <div className=\"player-view-container\">\r\n                <div className=\"player-view-header\">{`Hi ${playerInfo.name}! Select a card for this round!`}</div>\r\n                <div className=\"player-view-buttons\">\r\n                    <Button onClick={swapCards} negative>Swap all cards for new set</Button>\r\n                </div>\r\n                <div className=\"player-view-cards\">\r\n                    {this.props.playerInfo.whiteCards.map((card: string) => {\r\n                        const playCard: any = () => this.props.playCard(card, this.props.playerInfo.id)\r\n                        return (<div className=\"white-card\">\r\n                            {card}\r\n                            <Button onClick={playCard} disabled={!!playedCard || !this.props.currentJudge} positive>Play Card</Button>\r\n                        </div>)\r\n                    })}\r\n                </div>\r\n            </div>)\r\n    }\r\n}","import * as React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport { autobind } from 'core-decorators';\r\n\r\nexport class JudgeView extends React.Component<any, any> {\r\n    public waitingString: string = 'Still waiting on other players to submit their cards!';\r\n    public pickCardString: string = 'Pick one of the below cards as a winner!';\r\n    @autobind\r\n    public getJudgeCards(): JSX.Element {\r\n        return this.props.playedCards.map((card: any) => {\r\n                const pickWinner: any = () => this.props.pickWinner(card.playerId)\r\n                return (\r\n                    <div className=\"judge-card\">\r\n                        {card.cardName}\r\n                        <Button onClick={pickWinner} positive>Select as winner</Button>\r\n                    </div>\r\n                )\r\n            });\r\n    }\r\n    \r\n    public render(): JSX.Element {\r\n        const anyCardsPlayed: boolean = !!this.props.playedCards.length;\r\n        return (\r\n            <div className=\"judge-view-container\">\r\n                <div className=\"judge-header\">{`Hi ${this.props.playerName}! You are the judge for this round!`}</div>\r\n                <div className=\"judge-info\">{anyCardsPlayed ? this.pickCardString : this.waitingString}</div>\r\n                {this.getJudgeCards()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { Button, Input, InputOnChangeData, Modal } from 'semantic-ui-react';\r\nimport socketIOClient from 'socket.io-client';\r\nimport { BACKEND_URL } from '../constants/api';\r\nimport { autobind } from 'core-decorators';\r\nimport './games.css';\r\nimport { PlayerView } from './player-view';\r\nimport { JudgeView } from './judge-view';\r\n\r\nexport interface IGameState {\r\n    readonly games: any;\r\n    readonly gameName: string;\r\n    readonly playerName: string;\r\n    readonly playerId: string;\r\n    readonly gameToJoin: string;\r\n    readonly modalOpen: boolean;\r\n    readonly subscribedGame: any;\r\n}\r\nexport class Games extends React.Component<any, IGameState> {\r\n    public socket: SocketIOClient.Socket = socketIOClient();\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            games: {},\r\n            gameToJoin: '',\r\n            gameName: '',\r\n            playerName: '',\r\n            modalOpen: false,\r\n            subscribedGame: null,\r\n            playerId: ''\r\n        }\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        // const socket: SocketIOClient.Socket = socketIOClient(BACKEND_URL);\r\n        this.socket.on('connect', () => {\r\n            const playerId: string | null = window.localStorage.getItem('playerId');\r\n            if (playerId) {\r\n                this.setState({playerId});\r\n            } else {\r\n                this.setState({playerId: this.socket.id});\r\n                window.localStorage.setItem('playerId', this.socket.id);\r\n            }\r\n        });\r\n        this.socket.on('getGames', (games: any) => {\r\n            this.setState({games});\r\n        });\r\n       \r\n        this.socket.on('updatedGameState', (game: any) => {\r\n            this.setState({subscribedGame: game})\r\n        });\r\n        \r\n    }\r\n\r\n    @autobind\r\n    public getWhiteCard(): void {\r\n        this.socket.emit('getWhiteCard', this.state.subscribedGame.id, this.state.playerId);\r\n    }\r\n\r\n    @autobind\r\n    public createGame(): void {\r\n        this.socket.emit('createGame', this.state.gameName);\r\n        this.props.history.push(`/games/${this.socket.id}`);\r\n    }\r\n\r\n    @autobind \r\n    public joinGame(): void {\r\n        if (this.state.gameToJoin) {\r\n            this.socket.emit('joinGame', this.state.gameToJoin, this.state.playerName, this.state.playerId);\r\n            this.socket.emit('subscribeToGame', this.state.gameToJoin);\r\n        }\r\n        \r\n    }\r\n\r\n    @autobind \r\n    public setCurrentGame(gameId: string): void {\r\n        if (this.state.games[gameId].players[this.state.playerId]) {\r\n            this.socket.emit('subscribeToGame', gameId);\r\n        } else {\r\n            this.setState({gameToJoin: gameId, modalOpen: true});\r\n        }\r\n    }\r\n\r\n    @autobind\r\n    public setGameName(event: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData): void {\r\n        event.preventDefault();\r\n        this.setState({gameName: data.value})\r\n    }\r\n\r\n    @autobind\r\n    public setPlayerName(event: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData): void {\r\n        event.preventDefault();\r\n        this.setState({playerName: data.value})\r\n    }\r\n\r\n    @autobind\r\n    public playCard(cardName: string, playerId: string) {\r\n        this.socket.emit('playCard', this.state.subscribedGame.id, playerId, cardName);\r\n    }\r\n\r\n    @autobind\r\n    public getJoinModal(): JSX.Element {\r\n        return (\r\n            <Modal closeOnDimmerClick onClose={this.onCloseModal} open={this.state.modalOpen} size={'mini'}>\r\n                <Modal.Content>\r\n                    <div>Please enter your name to join game</div>\r\n                    <Input onChange={this.setPlayerName} /> \r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button positive onClick={this.joinGame}>Join Game</Button>\r\n                </Modal.Actions>\r\n            </Modal>)\r\n    }\r\n\r\n    @autobind\r\n    public onCloseModal(): void {\r\n        this.setState({modalOpen: false});\r\n    }\r\n\r\n    @autobind\r\n    public nextRound(playerId: string): void {\r\n        this.socket.emit('nextRound', this.state.subscribedGame.id, playerId)\r\n    }\r\n\r\n    @autobind\r\n    public swapCards(playerId: string): void {\r\n        this.socket.emit('swapCards', this.state.subscribedGame.id, playerId);\r\n    }\r\n\r\n    @autobind \r\n    public getPlayerView(): JSX.Element {\r\n        const { subscribedGame, playerId } = this.state;\r\n        return subscribedGame.currentJudge === playerId\r\n            ? <JudgeView\r\n                playedCards={subscribedGame.playedWhiteCards}\r\n                playerName={subscribedGame.players[playerId].name}\r\n                pickWinner={this.nextRound}\r\n            />\r\n            : <PlayerView \r\n                getWhiteCard={this.getWhiteCard} \r\n                playerInfo={this.state.subscribedGame.players[this.state.playerId]}\r\n                playedCards={this.state.subscribedGame.playedWhiteCards}\r\n                playCard={this.playCard}\r\n                swapCards={this.swapCards}\r\n                currentJudge={this.state.subscribedGame.currentJudge}\r\n            /> \r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return this.state.subscribedGame \r\n            ?  this.getPlayerView() \r\n            : (\r\n            <div className=\"games-container\">\r\n                <h3>{'Create a new game!'}</h3>\r\n                <div>\r\n                    <Input placeholder=\"Enter a name for the game!\" onChange={this.setGameName}/>\r\n                    <Button \r\n                        className=\"create-game-btn\" \r\n                        onClick={this.createGame}\r\n                    >\r\n                        Create Game\r\n                    </Button>\r\n                </div>\r\n                <div className='available-games'>\r\n                    {'Available Games'}\r\n                    {Object.values(this.state.games).map((game: any) => {\r\n                        const setCurrentGame: any = () => this.setCurrentGame(game.id)\r\n                        return <Button className=\"game-button\" onClick={setCurrentGame}>{`Join ${game.name}`}</Button>\r\n                    })}\r\n                </div>\r\n                {this.getJoinModal()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react'\r\nimport socketIOClient from 'socket.io-client';\r\nimport { BACKEND_URL } from '../constants/api';\r\nimport { Button, Loader } from 'semantic-ui-react';\r\nimport { autobind } from 'core-decorators';\r\n\r\nexport class GameBoard extends React.Component<any, any> {\r\n    socket: SocketIOClient.Socket = socketIOClient();\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            game: null\r\n        }\r\n    }\r\n    \r\n    public componentDidMount(): void {\r\n        this.socket.emit('subscribeToGame', this.props.match.params.gameId)\r\n        this.socket.on('updatedGameState', (game: any) => {\r\n            this.setState({game});\r\n        });\r\n    }\r\n\r\n    @autobind\r\n    public getMakeJudgeButton(playerId: string): JSX.Element | null {\r\n        const setJudge: any = () => this.socket.emit('setJudge', this.state.game.id, playerId);\r\n        return !this.state.game.currentJudge \r\n            ? <Button onClick={setJudge} positive>Make judge</Button>\r\n            : null;\r\n    }\r\n\r\n    @autobind\r\n    public nextRound(): void {\r\n        this.socket.emit('nextRound', this.state.game.id, null)\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        if (!this.state.game) {\r\n            return <Loader active/>\r\n        }\r\n        const { currentJudge, activeBlackCard, players, name } = this.state.game;\r\n        return (\r\n            <div>\r\n                <div className=\"game-board-header\">{`Welcome to game: ${name}`}</div>\r\n                <div className=\"round-info\">\r\n                    <div className=\"active-judge-header\">\r\n                        {currentJudge \r\n                            ? `${players[currentJudge].name} is judging!` \r\n                            : '**No judge selected, choose a judge to start round!**'}\r\n                    </div>\r\n                    <div className=\"active-black-card\">\r\n                        {activeBlackCard.text}\r\n                    </div>\r\n                    <Button negative onClick={this.nextRound} >Skip this round</Button>\r\n                </div>\r\n                <div className=\"game-players\">\r\n                    {Object.values(players).map((player: any) => {\r\n                        const activeJudgeClass: string = currentJudge === player.id ? ' active-judge' : '';\r\n                        return (<div className={`player-card${activeJudgeClass}`}>\r\n                            <div className=\"player-card-header\">{player.name}</div>\r\n                            <div><div>{'Score: '}</div>{player.score}</div>\r\n                            {this.getMakeJudgeButton(player.id)}\r\n                        </div>)\r\n                    })}\r\n                </div>\r\n            </div>)\r\n    }\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Games } from './games/games';\r\nimport { BrowserRouter as Router, Switch, Route, withRouter } from 'react-router-dom'\r\nimport { GameBoard } from './games/game-board';\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route key=\"games\" exact path='/' component={withRouter(Games)} />\r\n        <Route key=\"game-board\" exact path='/games/:gameId' component={withRouter(GameBoard)} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
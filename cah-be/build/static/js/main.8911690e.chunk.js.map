{"version":3,"sources":["games/player-view.tsx","games/judge-view.tsx","games/games.tsx","games/game-board.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["PlayerView","this","props","playerInfo","playedCard","playedCards","find","card","playerId","id","className","name","Button","onClick","swapCards","negative","whiteCards","map","playCard","disabled","currentJudge","positive","React","JudgeView","waitingString","pickCardString","cardName","pickWinner","length","numPlayers","anyCardsPlayed","playerName","getPickCardString","getJudgeCards","autobind","Games","socket","socketIOClient","state","games","gameToJoin","gameName","modalOpen","subscribedGame","gameId","match","params","on","emit","setState","window","localStorage","getItem","setItem","game","attemptNumber","substring","history","push","players","event","data","preventDefault","value","Modal","closeOnDimmerClick","onClose","onCloseModal","open","size","Content","Input","onChange","setPlayerName","Actions","joinGame","playedWhiteCards","Object","keys","nextRound","getWhiteCard","placeholder","setGameName","createGame","values","setCurrentGame","getPlayerView","getCreateGameScreen","getJoinModal","GameBoard","location","hostname","Loader","active","activeBlackCard","prevWinner","getGameLink","text","player","activeJudgeClass","score","getMakeJudgeButton","App","key","exact","path","component","withRouter","Boolean","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8911690e.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\nexport class PlayerView extends React.Component<any, any> {\r\n    public render():any {\r\n        const { playerInfo, playedCards } = this.props;\r\n        const playedCard = playedCards.find((card: any) => card.playerId === playerInfo.id);\r\n        const swapCards: any = () => this.props.swapCards(playerInfo.id);\r\n        return (\r\n            <div className=\"player-view-container\">\r\n                <div className=\"player-view-header\">{`Hi ${playerInfo.name}! Select a card for this round!`}</div>\r\n                <div className=\"player-view-buttons\">\r\n                    <Button onClick={swapCards} negative>Swap all cards for new set</Button>\r\n                </div>\r\n                <div className=\"player-view-cards\">\r\n                    {this.props.playerInfo.whiteCards.map((card: string) => {\r\n                        const playCard: any = () => this.props.playCard(card, this.props.playerInfo.id)\r\n                        return (<div className=\"white-card\">\r\n                            {card}\r\n                            <Button onClick={playCard} disabled={!!playedCard || !this.props.currentJudge} positive>Play Card</Button>\r\n                        </div>)\r\n                    })}\r\n                </div>\r\n            </div>)\r\n    }\r\n}","import * as React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport { autobind } from 'core-decorators';\r\n\r\nexport class JudgeView extends React.Component<any, any> {\r\n    public waitingString: string = 'Still waiting on other players to submit their cards!';\r\n    public pickCardString: string = 'Pick one of the below cards as a winner!';\r\n    @autobind\r\n    public getJudgeCards(): JSX.Element {\r\n        return this.props.playedCards.map((card: any) => {\r\n                const pickWinner: any = () => this.props.pickWinner(card.playerId)\r\n                return (\r\n                    <div className=\"judge-card\">\r\n                        {card.cardName}\r\n                        <Button onClick={pickWinner} positive>Select as winner</Button>\r\n                    </div>\r\n                )\r\n            });\r\n    }\r\n\r\n    @autobind\r\n    public getPickCardString(): string {\r\n        return `${this.pickCardString} (${this.props.playedCards.length} of ${this.props.numPlayers} players have played a card)`\r\n    }\r\n    \r\n    public render(): JSX.Element {\r\n        const anyCardsPlayed: boolean = !!this.props.playedCards.length;\r\n        return (\r\n            <div className=\"judge-view-container\">\r\n                <div className=\"judge-header\">{`Hi ${this.props.playerName}! You are the judge for this round!`}</div>\r\n                <div className=\"judge-info\">{anyCardsPlayed ? this.getPickCardString() : this.waitingString}</div>\r\n                {this.getJudgeCards()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { Button, Input, InputOnChangeData, Modal } from 'semantic-ui-react';\r\nimport socketIOClient from 'socket.io-client';\r\nimport { BACKEND_URL } from '../constants/api';\r\nimport { autobind } from 'core-decorators';\r\nimport './games.css';\r\nimport { PlayerView } from './player-view';\r\nimport { JudgeView } from './judge-view';\r\n\r\nexport interface IGameState {\r\n    readonly games: any;\r\n    readonly gameName: string;\r\n    readonly playerName: string;\r\n    readonly playerId: string;\r\n    readonly gameToJoin: string;\r\n    readonly modalOpen: boolean;\r\n    readonly subscribedGame: any;\r\n}\r\nexport class Games extends React.Component<any, IGameState> {\r\n    public socket: SocketIOClient.Socket = socketIOClient();\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            games: {},\r\n            gameToJoin: '',\r\n            gameName: '',\r\n            playerName: '',\r\n            modalOpen: false,\r\n            subscribedGame: null,\r\n            playerId: ''\r\n        }\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        const { gameId } = this.props.match.params;\r\n        this.socket.on('connect', () => { \r\n            if (gameId) {\r\n                this.socket.emit('subscribeToGame', gameId);\r\n                this.setState({modalOpen: true});\r\n            }\r\n            const playerId: string | null = window.localStorage.getItem('playerId');\r\n            if (playerId) {\r\n                this.setState({playerId});\r\n            } else {\r\n                this.setState({playerId: this.socket.id});\r\n                window.localStorage.setItem('playerId', this.socket.id);\r\n            }\r\n        });\r\n        this.socket.on('getGames', (games: any) => {\r\n            this.setState({games});\r\n        });\r\n       \r\n        this.socket.on('updatedGameState', (game: any) => {\r\n            this.setState({subscribedGame: game})\r\n        });\r\n        this.socket.on('reconnect', (attemptNumber: number) => {\r\n            if (this.state.subscribedGame) {\r\n                this.socket.emit('subscribeToGame', this.state.subscribedGame.id)\r\n            }\r\n        })\r\n    }\r\n\r\n    @autobind\r\n    public getWhiteCard(): void {\r\n        this.socket.emit('getWhiteCard', this.state.subscribedGame.id, this.state.playerId);\r\n    }\r\n\r\n    @autobind\r\n    public createGame(): void {\r\n        this.socket.emit('createGame', this.state.gameName);\r\n        const gameId: string = this.socket.id.substring(0, 4);\r\n        this.props.history.push(`/games/${gameId}`);\r\n    }\r\n\r\n    @autobind \r\n    public joinGame(): void {\r\n        const { gameId } = this.props.match.params;\r\n        this.socket.emit('joinGame', gameId, this.state.playerName, this.state.playerId);\r\n    }\r\n\r\n    @autobind \r\n    public setCurrentGame(gameId: string): void {\r\n        if (this.state.games[gameId].players[this.state.playerId]) {\r\n            this.socket.emit('subscribeToGame', gameId);\r\n        } else {\r\n            this.setState({gameToJoin: gameId, modalOpen: true});\r\n        }\r\n    }\r\n\r\n    @autobind\r\n    public setGameName(event: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData): void {\r\n        event.preventDefault();\r\n        this.setState({gameName: data.value})\r\n    }\r\n\r\n    @autobind\r\n    public setPlayerName(event: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData): void {\r\n        event.preventDefault();\r\n        this.setState({playerName: data.value})\r\n    }\r\n\r\n    @autobind\r\n    public playCard(cardName: string, playerId: string) {\r\n        this.socket.emit('playCard', this.state.subscribedGame.id, playerId, cardName);\r\n    }\r\n\r\n    @autobind\r\n    public getJoinModal(): JSX.Element {\r\n        return (\r\n            <Modal closeOnDimmerClick onClose={this.onCloseModal} open={this.state.modalOpen} size={'mini'}>\r\n                <Modal.Content>\r\n                    <div>Please enter your name to join game</div>\r\n                    <Input onChange={this.setPlayerName} /> \r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button positive onClick={this.joinGame}>Join Game</Button>\r\n                </Modal.Actions>\r\n            </Modal>)\r\n    }\r\n\r\n    @autobind\r\n    public onCloseModal(): void {\r\n        this.setState({modalOpen: false});\r\n    }\r\n\r\n    @autobind\r\n    public nextRound(playerId: string): void {\r\n        this.socket.emit('nextRound', this.state.subscribedGame.id, playerId)\r\n    }\r\n\r\n    @autobind\r\n    public swapCards(playerId: string): void {\r\n        this.socket.emit('swapCards', this.state.subscribedGame.id, playerId);\r\n    }\r\n\r\n    @autobind \r\n    public getPlayerView(): JSX.Element {\r\n        const { subscribedGame, playerId } = this.state;\r\n        return subscribedGame.currentJudge === playerId\r\n            ? <JudgeView\r\n                playedCards={subscribedGame.playedWhiteCards}\r\n                numPlayers={Object.keys(subscribedGame.players).length - 1}\r\n                playerName={subscribedGame.players[playerId].name}\r\n                pickWinner={this.nextRound}\r\n            />\r\n            : <PlayerView \r\n                getWhiteCard={this.getWhiteCard} \r\n                playerInfo={this.state.subscribedGame.players[this.state.playerId]}\r\n                playedCards={this.state.subscribedGame.playedWhiteCards}\r\n                playCard={this.playCard}\r\n                swapCards={this.swapCards}\r\n                currentJudge={this.state.subscribedGame.currentJudge}\r\n            /> \r\n    }\r\n\r\n    public getCreateGameScreen(): JSX.Element {\r\n        return (\r\n            <div className=\"games-container\">\r\n                <h3>{'Create a new game!'}</h3>\r\n                <div>\r\n                    <Input placeholder=\"Enter a name for the game!\" onChange={this.setGameName}/>\r\n                    <Button \r\n                        className=\"create-game-btn\" \r\n                        onClick={this.createGame}\r\n                    >\r\n                        Create Game\r\n                    </Button>\r\n                </div>\r\n                <div className='available-games'>\r\n                    {'Available Games'}\r\n                    {Object.values(this.state.games).map((game: any) => {\r\n                        const setCurrentGame: any = () => this.setCurrentGame(game.id)\r\n                        return <Button className=\"game-button\" onClick={setCurrentGame}>{`Join ${game.name}`}</Button>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return this.state.subscribedGame && this.state.subscribedGame.players[this.state.playerId]\r\n            ? this.getPlayerView() \r\n            : (\r\n            <>\r\n                {!this.props.match.params.gameId && this.getCreateGameScreen()}\r\n                {this.getJoinModal()}     \r\n            </>)\r\n    }\r\n}","import * as React from 'react'\r\nimport socketIOClient from 'socket.io-client';\r\nimport { BACKEND_URL } from '../constants/api';\r\nimport { Button, Loader } from 'semantic-ui-react';\r\nimport { autobind } from 'core-decorators';\r\n\r\nexport class GameBoard extends React.Component<any, any> {\r\n    socket: SocketIOClient.Socket = socketIOClient();\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            game: null\r\n        }\r\n    }\r\n    \r\n    public componentDidMount(): void {\r\n        this.socket.emit('subscribeToGame', this.props.match.params.gameId)\r\n        this.socket.on('updatedGameState', (game: any) => {\r\n            this.setState({game});\r\n        });\r\n        this.socket.on('reconnect', (attemptNumber: number) => {\r\n            this.socket.emit('subscribeToGame', this.props.match.params.gameId)\r\n        });\r\n    }\r\n\r\n    @autobind\r\n    public getMakeJudgeButton(playerId: string): JSX.Element | null {\r\n        const setJudge: any = () => this.socket.emit('setJudge', this.state.game.id, playerId);\r\n        return !this.state.game.currentJudge \r\n            ? <Button onClick={setJudge} positive>Make judge</Button>\r\n            : null;\r\n    }\r\n\r\n    @autobind\r\n    public nextRound(): void {\r\n        this.socket.emit('nextRound', this.state.game.id, null)\r\n    }\r\n\r\n    @autobind\r\n    public getGameLink(): string {\r\n        return `${window.location.hostname}/${this.state.game.id}`\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        if (!this.state.game) {\r\n            return <Loader active/>\r\n        }\r\n        const { currentJudge, activeBlackCard, players, name, prevWinner } = this.state.game;\r\n        return (\r\n            <div>\r\n                <div className=\"game-board-header\">{`Welcome to game: ${name}`}</div>\r\n                <div className=\"game-link\">{`Send this link for other players to join!: ${this.getGameLink()}`}</div>\r\n                <div className=\"round-info\">\r\n                    <div className=\"active-judge-header\">\r\n                        {currentJudge \r\n                            ? `${players[currentJudge].name} is judging!` \r\n                            : '**No judge selected, choose a judge to start round!**'}\r\n                    </div>\r\n                    <div className=\"active-black-card\">\r\n                        {activeBlackCard.text}\r\n                    </div>\r\n                    <Button negative onClick={this.nextRound} >Skip this round</Button>\r\n                    {prevWinner && (<div className=\"prev-winner\">{`${players[prevWinner].name} won the last round!`}</div>)}\r\n                </div>\r\n                <div className=\"players-header\">Players</div>\r\n                <div className=\"game-players\">\r\n                    {Object.values(players).map((player: any) => {\r\n                        const activeJudgeClass: string = currentJudge === player.id ? ' active-judge' : '';\r\n                        return (<div className={`player-card${activeJudgeClass}`}>\r\n                            <div className=\"player-card-header\">{player.name}</div>\r\n                            <div><div>{'Score: '}</div>{player.score}</div>\r\n                            {this.getMakeJudgeButton(player.id)}\r\n                        </div>)\r\n                    })}\r\n                </div>\r\n            </div>)\r\n    }\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Games } from './games/games';\r\nimport { BrowserRouter as Router, Switch, Route, withRouter } from 'react-router-dom'\r\nimport { GameBoard } from './games/game-board';\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route key=\"games\" exact path='/' component={withRouter(Games)} />\r\n        <Route key=\"games\" exact path='/:gameId' component={withRouter(Games)} />\r\n        <Route key=\"game-board\" exact path='/games/:gameId' component={withRouter(GameBoard)} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
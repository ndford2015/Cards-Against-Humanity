#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cah-be:server');
var http = require('http');
var gameData = require('../public/game_data.json');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// Handle creating and joining games
var _ = require('lodash');
const games = {};
let interval;
io.on('connection', function(socket){
  console.log('a user connected with id: ', socket.id);
  if (interval) {
    clearInterval(interval);
  }

  socket.on('createGame', (gameName) => {
    games[socket.id] = {
      id: socket.id,
      name: gameName,
      players: {},
      blackCards: _.shuffle([...gameData.blackCards]),
      whiteCards: _.shuffle([...gameData.whiteCards])
    };
    console.log('games: ', games);
  });

  socket.on('joinGame', (gameId, playerName) => {
    games[gameId].players[socket.id] = {
      id: socket.id,
      name: playerName,
      whiteCards: [],
      blackCards: [],
      isJudge: false
    }
  });

  socket.on('subscribeToGame', (gameId) => {
    socket.emit('updatedGameState', games[gameId]);
    setInterval(() => {
      socket.emit('updatedGameState', games[gameId]);
    }, 5000);
  });
  io.emit('getGames', games)
  interval = setInterval(() => io.emit('getGames', games), 5000);

});

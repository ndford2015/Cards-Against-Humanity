#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cah-be:server');
var http = require('http');
var gameData = require('../public/game_data.json');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



// Handle creating and joining games
var _ = require('lodash');
const games = {};
const timeouts = {}
let interval;

function deleteGame(gameId) {
  delete games[gameId];  
  delete timeouts[gameId];
}

function resetGameTimer(gameId) {
  if (timeouts[gameId]) {
    clearTimeout(timeouts[gameId]);
    timeouts[gameId] = setTimeout(() => deleteGame(gameId), 3600000);
  }
}

io.on('connection', function(socket){
  if (interval) {
    clearInterval(interval);
  }

  socket.on('createGame', (gameName) => {
    const blackCards = _.shuffle([...gameData.blackCards]).filter((card) => card.pick === 1);
    const activeBlackCard = blackCards.pop();
    const gameId = socket.id.substring(0,4);
    const timeout = setTimeout(() => deleteGame(gameId), 3600000);
    games[gameId] = {
      id: gameId,
      name: gameName,
      players: {},
      blackCards: blackCards,
      whiteCards: _.shuffle([...gameData.whiteCards]),
      activeBlackCard,
      playedWhiteCards: [],
      currentJudge: null,
      prevWinner: null,
    };
    timeouts[gameId] = timeout;
  });

  socket.on('joinGame', (gameId, playerName, playerId) => {
    games[gameId].players[playerId] = {
      id: playerId,
      name: playerName,
      whiteCards: [...games[gameId].whiteCards.splice(-10, 10)],
      blackCards: [],
      isJudge: false,
      score: 0
    }
    resetGameTimer(gameId);
  });

  socket.on('setJudge', (gameId, playerId) => {
    games[gameId].currentJudge = playerId;
    games[gameId].prevWinner = null;
    resetGameTimer(gameId);
  })

  socket.on('getWhiteCard', (gameId, playerId) => {
    const whiteCard = games[gameId].whiteCards.pop();
    games[gameId].players[playerId].whiteCards.push(whiteCard);
    resetGameTimer(gameId);
  });

  socket.on('nextRound', (gameId, winnerId) => {
    games[gameId].currentJudge = null;
    games[gameId].playedWhiteCards = [];
    games[gameId].activeBlackCard = games[gameId].blackCards.pop();
    if (winnerId) {
      games[gameId].players[winnerId].score++;
      games[gameId].prevWinner = winnerId;
    }
    resetGameTimer(gameId);
  });

  socket.on('swapCards', (gameId, playerId) => {
    const oldCards = [...games[gameId].players[playerId].whiteCards];
    const newCards = games[gameId].whiteCards.splice(-10, 10);
    games[gameId].players[playerId].whiteCards = newCards;
    const newDeck = games[gameId].whiteCards.concat(oldCards);
    games[gameId].whiteCards = _.shuffle([...newDeck]);
    resetGameTimer(gameId);
  });

  socket.on('playCard', (gameId, playerId, cardName) => {
    const playerWhiteCards = games[gameId].players[playerId].whiteCards;
    const cardIndex = playerWhiteCards.indexOf(cardName);
    playerWhiteCards.splice(cardIndex, 1);
    games[gameId].playedWhiteCards.push({playerId, cardName});
    playerWhiteCards.push(games[gameId].whiteCards.pop());
    resetGameTimer(gameId);
  });

  socket.on('subscribeToGame', (gameId) => {
    socket.emit('updatedGameState', games[gameId]);
    setInterval(() => {
      socket.emit('updatedGameState', games[gameId]);
    }, 500);
  });
  io.emit('getGames', games)
  interval = setInterval(() => io.emit('getGames', games), 5000);

});
